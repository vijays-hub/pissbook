// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           String    @id
  username     String    @unique
  displayName  String    @default("")
  email        String    @unique
  passwordHash String?
  googleId     String?
  avatarUrl    String?
  bio          String?
  sessions     Session[]
  posts        Post[]

  /// `following` represents the list of users this user is following.
  /// Using `@relation("Followers")` indicates that this user is the follower
  /// in these relationships.
  following Follow[] @relation("Followers")

  /// `followers` represents the list of users following this user.
  /// Using `@relation("Following")` indicates that this user is the one being followed.
  followers Follow[] @relation("Following")

  createdAt DateTime @default(now())

  @@map("users") // we don't want the table to be called "User" in the database, instead we want it to be called "users"
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  // This is the relation to the User model. It is a one-to-many relation, as one user can have many sessions. Cascade means that if a user is deleted, all of their sessions will be deleted as well.
  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  /// `followerId` represents the ID of the user who is following another user.
  /// It serves as a foreign key linking this record to a specific `User`.
  followerId String

  /// The `follower` field establishes a relation to the `User` model
  /// representing the user who is doing the following.
  /// This uses the "Followers" relation name to clearly indicate that
  /// the user represented by `followerId` is a follower of another user.
  /// `onDelete: Cascade` ensures that if a follower is deleted, their
  /// follow records are also removed.

  /// The @relation attribute:
  /// 
  /// 1.	Names the relation: Useful when you have multiple relations between the same two models, or in self-referencing cases (like with Follow).
  /// 2.	Specifies fields and references: These indicate the foreign key field (in the current model) and the primary key it references in the related model.
  /// 3.	Handles cascading behavior: With options like onDelete: Cascade, you can define how related records are handled when one side of the relationship is deleted.
  follower User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)

  /// `followingId` represents the ID of the user who is being followed.
  /// It serves as a foreign key linking this record to a specific `User`.
  followingId String

  /// The `following` field establishes a relation to the `User` model
  /// representing the user who is being followed.
  /// This uses the "Following" relation name to indicate that
  /// the user represented by `followingId` is being followed.
  /// `onDelete: Cascade` ensures that if a user who is being followed is deleted,
  /// their follow records are also removed.
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  /// The `@@unique([followerId, followingId])` constraint enforces that a follower
  /// can only follow a specific user once, preventing duplicate follow records.
  /// Also ensures that we have the same combination of followerId and followingId.
  @@unique([followerId, followingId])
  /// `@@map("follows")` renames the underlying table in the database to "follows".
  /// This makes it clearer in the database that this table stores follow relationships.
  @@map("follows")
}

model Post {
  id          String       @id @default(cuid())
  content     String
  userId      String
  user        User         @relation(references: [id], fields: [userId], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  attachments Attachment[]

  @@map("posts")
}

// A single post can have multiple attachments, hence bloating our Post model is not a good idea.
// Instead, we create a separate model for attachments and establish a one-to-many relation between Post and Attachment.
model Attachment {
  id String @id @default(cuid())

  // Since the media can be very large (especially videos), it might take a while for the upload to finish.
  // So, we would need to upload them immediately before the user submits the post (by clicking the "Post" button).
  // Because, when we upload after clicking the "Post" button, the user would have to wait for the 
  // upload to finish which would take a while. 
  //
  // But here's the catch: If the user decides to cancel the post, we would have already uploaded the media.
  // In such cases, we won't have a post to associate the media with. For this reason, the postId is optional.
  // And if the user decides to post the media, we would associate the media with the post.
  // 
  // Don't worry about the uploaded media being orphaned. We can run a cron job to delete media that 
  // are not associated with any post later. This way we are not bloating our database with orphaned media.
  postId String?

  // On delete of an attachment, we don't want to delete the post. So, we set the onDelete to SetNull, so that the
  // postId of the attachment is set to null when the post is deleted.
  post Post? @relation(fields: [postId], references: [id], onDelete: SetNull)

  type      MediaType
  url       String
  createdAt DateTime  @default(now())

  @@map("post_attachments")
}

enum MediaType {
  IMAGE
  VIDEO
}
